
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

import java_cup.runtime.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Syntax extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public Syntax() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Syntax(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Syntax(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\114\000\002\002\004\000\002\003\003\000\002\002" +
    "\004\000\002\002\003\000\002\004\003\000\002\004\003" +
    "\000\002\004\003\000\002\004\003\000\002\004\003\000" +
    "\002\004\003\000\002\005\003\000\002\005\003\000\002" +
    "\006\003\000\002\006\003\000\002\006\003\000\002\006" +
    "\003\000\002\006\003\000\002\006\003\000\002\006\003" +
    "\000\002\007\003\000\002\007\003\000\002\012\003\000" +
    "\002\012\003\000\002\012\003\000\002\011\004\000\002" +
    "\013\006\000\002\013\003\000\002\014\005\000\002\014" +
    "\002\000\002\016\006\000\002\016\003\000\002\016\006" +
    "\000\002\017\005\000\002\017\005\000\002\017\002\000" +
    "\002\020\003\000\002\020\003\000\002\022\006\000\002" +
    "\025\003\000\002\025\005\000\002\024\004\000\002\010" +
    "\005\000\002\010\007\000\002\026\003\000\002\026\003" +
    "\000\002\026\003\000\002\026\003\000\002\026\004\000" +
    "\002\027\003\000\002\027\003\000\002\027\003\000\002" +
    "\027\003\000\002\030\003\000\002\030\003\000\002\043" +
    "\005\000\002\043\004\000\002\031\006\000\002\031\007" +
    "\000\002\032\004\000\002\032\002\000\002\033\007\000" +
    "\002\034\011\000\002\037\006\000\002\035\013\000\002" +
    "\035\013\000\002\036\007\000\002\015\011\000\002\015" +
    "\010\000\002\015\010\000\002\015\007\000\002\040\006" +
    "\000\002\040\005\000\002\041\003\000\002\041\005\000" +
    "\002\042\007\000\002\042\006" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\226\000\006\047\007\051\005\001\002\000\004\002" +
    "\230\001\002\000\004\004\226\001\002\000\006\047\007" +
    "\051\164\001\002\000\004\052\216\001\002\000\006\002" +
    "\ufffe\047\011\001\002\000\004\052\012\001\002\000\004" +
    "\015\013\001\002\000\006\016\014\042\016\001\002\000" +
    "\004\013\023\001\002\000\006\011\021\016\022\001\002" +
    "\000\004\052\020\001\002\000\006\011\uffdb\016\uffdb\001" +
    "\002\000\006\011\uffd9\016\uffd9\001\002\000\004\042\016" +
    "\001\002\000\004\013\023\001\002\000\022\005\046\006" +
    "\033\042\030\043\047\044\031\045\037\051\005\052\034" +
    "\001\002\000\006\002\uffbf\047\uffbf\001\002\000\026\005" +
    "\uffcc\006\uffcc\014\uffcc\042\uffcc\043\uffcc\044\uffcc\045\uffcc" +
    "\050\uffcc\051\uffcc\052\uffcc\001\002\000\026\005\uffd1\006" +
    "\uffd1\014\uffd1\042\uffd1\043\uffd1\044\uffd1\045\uffd1\050\uffd1" +
    "\051\uffd1\052\uffd1\001\002\000\026\005\uffd5\006\uffd5\014" +
    "\uffd5\042\uffd5\043\uffd5\044\uffd5\045\uffd5\050\uffd5\051\uffd5" +
    "\052\uffd5\001\002\000\004\052\207\001\002\000\004\015" +
    "\203\001\002\000\026\005\uffd6\006\uffd6\014\uffd6\042\uffd6" +
    "\043\uffd6\044\uffd6\045\uffd6\050\uffd6\051\uffd6\052\uffd6\001" +
    "\002\000\052\007\uffea\011\uffea\016\uffea\017\uffea\020\uffea" +
    "\021\uffea\022\uffea\023\uffea\024\uffea\025\uffea\026\uffea\027" +
    "\uffea\030\uffea\032\uffea\033\uffea\034\uffea\035\uffea\036\uffea" +
    "\037\uffea\040\uffea\001\002\000\012\015\170\026\uffec\027" +
    "\uffec\041\167\001\002\000\006\026\144\027\145\001\002" +
    "\000\026\005\uffd3\006\uffd3\014\uffd3\042\uffd3\043\uffd3\044" +
    "\uffd3\045\uffd3\050\uffd3\051\164\052\uffd3\001\002\000\004" +
    "\015\156\001\002\000\004\007\155\001\002\000\026\005" +
    "\uffd4\006\uffd4\014\uffd4\042\uffd4\043\uffd4\044\uffd4\045\uffd4" +
    "\050\uffd4\051\uffd4\052\uffd4\001\002\000\026\005\uffd0\006" +
    "\uffd0\014\uffd0\042\uffd0\043\uffd0\044\uffd0\045\uffd0\050\uffd0" +
    "\051\uffd0\052\uffd0\001\002\000\026\005\uffcf\006\uffcf\014" +
    "\uffcf\042\uffcf\043\uffcf\044\uffcf\045\uffcf\050\uffcf\051\uffcf" +
    "\052\uffcf\001\002\000\026\005\uffce\006\uffce\014\uffce\042" +
    "\uffce\043\uffce\044\uffce\045\uffce\050\uffce\051\uffce\052\uffce" +
    "\001\002\000\026\005\uffcd\006\uffcd\014\uffcd\042\uffcd\043" +
    "\uffcd\044\uffcd\045\uffcd\050\uffcd\051\uffcd\052\uffcd\001\002" +
    "\000\052\007\uffeb\011\uffeb\016\uffeb\017\uffeb\020\uffeb\021" +
    "\uffeb\022\uffeb\023\uffeb\024\uffeb\025\uffeb\026\uffeb\027\uffeb" +
    "\030\uffeb\032\uffeb\033\uffeb\034\uffeb\035\uffeb\036\uffeb\037" +
    "\uffeb\040\uffeb\001\002\000\004\015\104\001\002\000\026" +
    "\005\046\006\033\014\uffc6\042\030\043\047\044\031\045" +
    "\037\050\uffc6\051\005\052\034\001\002\000\006\014\054" +
    "\050\055\001\002\000\026\005\046\006\033\014\uffc6\042" +
    "\030\043\047\044\031\045\037\050\uffc6\051\005\052\034" +
    "\001\002\000\006\014\uffc7\050\uffc7\001\002\000\034\002" +
    "\uffc9\005\uffc9\006\uffc9\014\uffc9\042\uffc9\043\uffc9\044\uffc9" +
    "\045\uffc9\046\uffc9\047\uffc9\050\uffc9\051\uffc9\052\uffc9\001" +
    "\002\000\014\004\064\005\046\006\033\007\060\052\062" +
    "\001\002\000\004\014\057\001\002\000\034\002\uffc8\005" +
    "\uffc8\006\uffc8\014\uffc8\042\uffc8\043\uffc8\044\uffc8\045\uffc8" +
    "\046\uffc8\047\uffc8\050\uffc8\051\uffc8\052\uffc8\001\002\000" +
    "\004\014\uffca\001\002\000\004\007\103\001\002\000\052" +
    "\007\uffec\011\uffec\016\uffec\017\uffec\020\uffec\021\uffec\022" +
    "\uffec\023\uffec\024\uffec\025\uffec\026\uffec\027\uffec\030\uffec" +
    "\032\uffec\033\uffec\034\uffec\035\uffec\036\uffec\037\uffec\040" +
    "\uffec\001\002\000\010\007\uffdd\011\uffdd\016\uffdd\001\002" +
    "\000\010\007\uffde\011\uffde\016\uffde\001\002\000\046\007" +
    "\uffe7\011\uffe7\016\uffe7\017\073\020\071\021\070\022\067" +
    "\023\075\024\072\025\066\030\uffe7\032\uffe7\033\uffe7\034" +
    "\uffe7\035\uffe7\036\uffe7\037\uffe7\040\uffe7\001\002\000\010" +
    "\005\uffef\006\uffef\052\uffef\001\002\000\010\005\ufff2\006" +
    "\ufff2\052\ufff2\001\002\000\010\005\ufff3\006\ufff3\052\ufff3" +
    "\001\002\000\010\005\ufff4\006\ufff4\052\ufff4\001\002\000" +
    "\010\005\ufff0\006\ufff0\052\ufff0\001\002\000\010\005\ufff5" +
    "\006\ufff5\052\ufff5\001\002\000\010\005\046\006\033\052" +
    "\062\001\002\000\010\005\ufff1\006\ufff1\052\ufff1\001\002" +
    "\000\046\007\uffe5\011\uffe5\016\uffe5\017\073\020\071\021" +
    "\070\022\067\023\075\024\072\025\066\030\uffe5\032\uffe5" +
    "\033\uffe5\034\uffe5\035\uffe5\036\uffe5\037\uffe5\040\uffe5\001" +
    "\002\000\010\005\046\006\033\052\062\001\002\000\030" +
    "\007\uffe8\011\uffe8\016\uffe8\030\uffe8\032\uffe8\033\uffe8\034" +
    "\uffe8\035\uffe8\036\uffe8\037\uffe8\040\uffe8\001\002\000\046" +
    "\007\uffe5\011\uffe5\016\uffe5\017\073\020\071\021\070\022" +
    "\067\023\075\024\072\025\066\030\uffe5\032\uffe5\033\uffe5" +
    "\034\uffe5\035\uffe5\036\uffe5\037\uffe5\040\uffe5\001\002\000" +
    "\030\007\uffe6\011\uffe6\016\uffe6\030\uffe6\032\uffe6\033\uffe6" +
    "\034\uffe6\035\uffe6\036\uffe6\037\uffe6\040\uffe6\001\002\000" +
    "\004\014\uffcb\001\002\000\004\042\105\001\002\000\004" +
    "\052\152\001\002\000\004\007\107\001\002\000\012\005" +
    "\046\006\033\052\062\053\111\001\002\000\004\007\137" +
    "\001\002\000\006\007\uffe3\016\uffe3\001\002\000\022\030" +
    "\113\032\123\033\117\034\115\035\114\036\116\037\121" +
    "\040\122\001\002\000\010\005\ufff7\006\ufff7\052\ufff7\001" +
    "\002\000\010\005\ufffb\006\ufffb\052\ufffb\001\002\000\010" +
    "\005\ufffc\006\ufffc\052\ufffc\001\002\000\010\005\ufffa\006" +
    "\ufffa\052\ufffa\001\002\000\010\005\ufffd\006\ufffd\052\ufffd" +
    "\001\002\000\010\005\046\006\033\052\062\001\002\000" +
    "\010\005\ufff9\006\ufff9\052\ufff9\001\002\000\010\005\ufff8" +
    "\006\ufff8\052\ufff8\001\002\000\010\005\ufff6\006\ufff6\052" +
    "\ufff6\001\002\000\010\005\046\006\033\052\062\001\002" +
    "\000\026\007\uffdf\016\uffdf\030\113\032\123\033\117\034" +
    "\115\035\114\036\116\037\121\040\122\001\002\000\006" +
    "\007\uffe4\016\uffe4\001\002\000\010\005\046\006\033\052" +
    "\062\001\002\000\010\005\046\006\033\052\062\001\002" +
    "\000\026\007\uffdf\016\uffdf\030\113\032\123\033\117\034" +
    "\115\035\114\036\116\037\121\040\122\001\002\000\006" +
    "\007\uffe1\016\uffe1\001\002\000\026\007\uffdf\016\uffdf\030" +
    "\113\032\123\033\117\034\115\035\114\036\116\037\121" +
    "\040\122\001\002\000\006\007\uffe0\016\uffe0\001\002\000" +
    "\026\007\uffdf\016\uffdf\030\113\032\123\033\117\034\115" +
    "\035\114\036\116\037\121\040\122\001\002\000\006\007" +
    "\uffe2\016\uffe2\001\002\000\010\005\046\006\033\052\062" +
    "\001\002\000\004\016\150\001\002\000\004\016\146\001" +
    "\002\000\026\016\uffe7\017\073\020\071\021\070\022\067" +
    "\023\075\024\072\025\066\026\144\027\145\001\002\000" +
    "\006\007\uffe9\016\uffe9\001\002\000\006\007\uffee\016\uffee" +
    "\001\002\000\006\007\uffed\016\uffed\001\002\000\004\013" +
    "\023\001\002\000\026\005\uffc1\006\uffc1\014\uffc1\042\uffc1" +
    "\043\uffc1\044\uffc1\045\uffc1\050\uffc1\051\uffc1\052\uffc1\001" +
    "\002\000\004\013\023\001\002\000\026\005\uffc2\006\uffc2" +
    "\014\uffc2\042\uffc2\043\uffc2\044\uffc2\045\uffc2\050\uffc2\051" +
    "\uffc2\052\uffc2\001\002\000\004\041\153\001\002\000\012" +
    "\004\064\005\046\006\033\052\062\001\002\000\004\007" +
    "\uffc3\001\002\000\026\005\uffd2\006\uffd2\014\uffd2\042\uffd2" +
    "\043\uffd2\044\uffd2\045\uffd2\050\uffd2\051\uffd2\052\uffd2\001" +
    "\002\000\012\005\046\006\033\052\062\053\111\001\002" +
    "\000\004\016\160\001\002\000\004\013\023\001\002\000" +
    "\030\005\uffc5\006\uffc5\014\uffc5\042\uffc5\043\uffc5\044\uffc5" +
    "\045\uffc5\046\162\050\uffc5\051\uffc5\052\uffc5\001\002\000" +
    "\004\013\023\001\002\000\026\005\uffc4\006\uffc4\014\uffc4" +
    "\042\uffc4\043\uffc4\044\uffc4\045\uffc4\050\uffc4\051\uffc4\052" +
    "\uffc4\001\002\000\004\004\165\001\002\000\004\007\166" +
    "\001\002\000\030\005\uffbb\006\uffbb\014\uffbb\042\uffbb\043" +
    "\uffbb\044\uffbb\045\uffbb\047\uffbb\050\uffbb\051\uffbb\052\uffbb" +
    "\001\002\000\012\004\064\005\046\006\033\052\062\001" +
    "\002\000\014\004\064\005\046\006\033\016\173\052\062" +
    "\001\002\000\006\011\175\016\176\001\002\000\006\011" +
    "\uffb9\016\uffb9\001\002\000\004\007\174\001\002\000\026" +
    "\005\uffb6\006\uffb6\014\uffb6\042\uffb6\043\uffb6\044\uffb6\045" +
    "\uffb6\050\uffb6\051\uffb6\052\uffb6\001\002\000\012\004\064" +
    "\005\046\006\033\052\062\001\002\000\004\007\177\001" +
    "\002\000\026\005\uffb7\006\uffb7\014\uffb7\042\uffb7\043\uffb7" +
    "\044\uffb7\045\uffb7\050\uffb7\051\uffb7\052\uffb7\001\002\000" +
    "\006\011\uffb8\016\uffb8\001\002\000\004\007\202\001\002" +
    "\000\026\005\uffdc\006\uffdc\014\uffdc\042\uffdc\043\uffdc\044" +
    "\uffdc\045\uffdc\050\uffdc\051\uffdc\052\uffdc\001\002\000\012" +
    "\005\046\006\033\052\062\053\111\001\002\000\004\016" +
    "\205\001\002\000\004\013\023\001\002\000\026\005\uffc0" +
    "\006\uffc0\014\uffc0\042\uffc0\043\uffc0\044\uffc0\045\uffc0\050" +
    "\uffc0\051\uffc0\052\uffc0\001\002\000\006\007\211\041\210" +
    "\001\002\000\012\004\064\005\046\006\033\052\062\001" +
    "\002\000\026\005\uffd8\006\uffd8\014\uffd8\042\uffd8\043\uffd8" +
    "\044\uffd8\045\uffd8\050\uffd8\051\uffd8\052\uffd8\001\002\000" +
    "\004\007\213\001\002\000\026\005\uffd7\006\uffd7\014\uffd7" +
    "\042\uffd7\043\uffd7\044\uffd7\045\uffd7\050\uffd7\051\uffd7\052" +
    "\uffd7\001\002\000\006\011\uffda\016\uffda\001\002\000\006" +
    "\002\uffbd\047\uffbd\001\002\000\004\015\217\001\002\000" +
    "\006\016\220\042\016\001\002\000\004\013\023\001\002" +
    "\000\006\011\021\016\222\001\002\000\004\013\023\001" +
    "\002\000\006\002\uffbe\047\uffbe\001\002\000\006\002\uffbc" +
    "\047\uffbc\001\002\000\006\002\uffff\047\011\001\002\000" +
    "\004\007\227\001\002\000\030\005\uffba\006\uffba\014\uffba" +
    "\042\uffba\043\uffba\044\uffba\045\uffba\047\uffba\050\uffba\051" +
    "\uffba\052\uffba\001\002\000\004\002\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\226\000\010\002\003\015\007\040\005\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\015\224\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\024\016\025\014\001\001\000\004" +
    "\031\214\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\024\213\001\001" +
    "\000\004\031\023\001\001\000\034\010\031\011\037\012" +
    "\034\022\026\026\044\027\024\030\047\033\025\034\041" +
    "\035\042\036\043\040\035\042\040\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\007\142\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\036\010\031\011\037\012\034\022\026\026\044" +
    "\027\024\030\051\032\050\033\025\034\041\035\042\036" +
    "\043\040\035\042\040\001\001\000\004\043\055\001\001" +
    "\000\036\010\031\011\037\012\034\022\026\026\044\027" +
    "\024\030\051\032\052\033\025\034\041\035\042\036\043" +
    "\040\035\042\040\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\012\064\013\062\020\060\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\006\073\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\012\075\001\001\000\002\001" +
    "\001\000\006\006\076\014\077\001\001\000\004\012\100" +
    "\001\001\000\002\001\001\000\006\006\076\014\101\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\037\105" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\012" +
    "\064\013\111\016\107\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\004\117\005\123\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\012\064\013\134\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\012\064\013\124\001\001\000\010\004\126\005\127\017" +
    "\125\001\001\000\002\001\001\000\006\012\064\013\132" +
    "\001\001\000\006\012\064\013\130\001\001\000\010\004" +
    "\126\005\127\017\131\001\001\000\002\001\001\000\010" +
    "\004\126\005\127\017\133\001\001\000\002\001\001\000" +
    "\010\004\126\005\127\017\135\001\001\000\002\001\001" +
    "\000\010\011\140\012\141\013\137\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\006\073\007\142\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\031\146\001\001\000\002\001\001\000\004\031\150" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\012" +
    "\064\013\062\020\153\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\012\064\013\111\016\156\001\001\000" +
    "\002\001\001\000\004\031\160\001\001\000\002\001\001" +
    "\000\004\031\162\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\012\064" +
    "\013\062\020\200\001\001\000\012\012\064\013\062\020" +
    "\171\041\170\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\012\064\013" +
    "\062\020\177\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\012\064\013\111\016\203\001\001\000\002\001\001" +
    "\000\004\031\205\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\012\064\013\062\020\211\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\024\016" +
    "\025\220\001\001\000\004\031\223\001\001\000\002\001" +
    "\001\000\004\031\222\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Syntax$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Syntax$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Syntax$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    private Symbol s;

    public void syntax_error(Symbol s){
        System.out.println("compiler has detected a syntax error at line " + s.left + " column " + s.right);
    }

    public Symbol getS(){
        return this.s;
}


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Syntax$actions {
  private final Syntax parser;

  /** Constructor */
  CUP$Syntax$actions(Syntax parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Syntax$do_action_part00000000(
    int                        CUP$Syntax$act_num,
    java_cup.runtime.lr_parser CUP$Syntax$parser,
    java.util.Stack            CUP$Syntax$stack,
    int                        CUP$Syntax$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Syntax$result;

      /* select the action based on the action number */
      switch (CUP$Syntax$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= Program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).value;
		RESULT = start_val;
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Syntax$parser.done_parsing();
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // Start ::= Program 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("Start",1, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // Program ::= LibraryImport FunctionDeclaration 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("Program",0, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // Program ::= FunctionDeclaration 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("Program",0, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // RelationalOp ::= LESS_THAN 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("RelationalOp",2, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // RelationalOp ::= MORE_THAN 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("RelationalOp",2, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // RelationalOp ::= LESS_OR_EQ 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("RelationalOp",2, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // RelationalOp ::= MORE_OR_EQ 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("RelationalOp",2, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // RelationalOp ::= EQUALS 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("RelationalOp",2, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // RelationalOp ::= DIFFERENT_THAN 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("RelationalOp",2, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // LogicOp ::= AND 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("LogicOp",3, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // LogicOp ::= OR 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("LogicOp",3, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // AritmethicOp ::= MUL 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("AritmethicOp",4, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // AritmethicOp ::= POW 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("AritmethicOp",4, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // AritmethicOp ::= SUM 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("AritmethicOp",4, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // AritmethicOp ::= SUB 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("AritmethicOp",4, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // AritmethicOp ::= DIV 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("AritmethicOp",4, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // AritmethicOp ::= INT_DIV 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("AritmethicOp",4, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // AritmethicOp ::= MOD 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("AritmethicOp",4, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // IncDec ::= INC 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("IncDec",5, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // IncDec ::= DEC 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("IncDec",5, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // ID_NUM ::= IDENTIFIER 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("ID_NUM",8, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // ID_NUM ::= INTEGER_LITERAL 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("ID_NUM",8, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // ID_NUM ::= DECIMAL_LITERAL 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("ID_NUM",8, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // IncDecOperation ::= ID_NUM IncDec 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("IncDecOperation",7, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // AritExp ::= ID_NUM AritmethicOp ID_NUM MoreAritExp 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("AritExp",9, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // AritExp ::= ID_NUM 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("AritExp",9, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // MoreAritExp ::= AritmethicOp ID_NUM MoreAritExp 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("MoreAritExp",10, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // MoreAritExp ::= 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("MoreAritExp",10, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // BoolExp ::= AritExp LogicOp AritExp MoreBoolExp 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("BoolExp",12, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // BoolExp ::= BOOL 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("BoolExp",12, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // BoolExp ::= AritExp RelationalOp AritExp MoreBoolExp 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("BoolExp",12, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // MoreBoolExp ::= LogicOp AritExp MoreBoolExp 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("MoreBoolExp",13, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // MoreBoolExp ::= RelationalOp AritExp MoreBoolExp 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("MoreBoolExp",13, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // MoreBoolExp ::= 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("MoreBoolExp",13, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // Value ::= STRING_LITERAL 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("Value",14, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // Value ::= AritExp 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("Value",14, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // Assignment ::= IDENTIFIER ASSIGNMENT Value SEMICOLON 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("Assignment",16, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // ParameterList ::= Parameter 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("ParameterList",19, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // ParameterList ::= ParameterList COMMA Parameter 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("ParameterList",19, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // Parameter ::= DATA_TYPE IDENTIFIER 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("Parameter",18, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // Declaration ::= DATA_TYPE IDENTIFIER SEMICOLON 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("Declaration",6, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // Declaration ::= DATA_TYPE IDENTIFIER ASSIGNMENT Value SEMICOLON 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("Declaration",6, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-4)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // Statement ::= Declaration 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("Statement",20, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // Statement ::= Assignment 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("Statement",20, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // Statement ::= FunctionCall 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("Statement",20, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // Statement ::= LibraryImport 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("Statement",20, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // Statement ::= IncDecOperation SEMICOLON 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("Statement",20, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // Structure ::= IfSt 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("Structure",21, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // Structure ::= IfElseSt 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("Structure",21, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // Structure ::= ForSt 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("Structure",21, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // Structure ::= WhileSt 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("Structure",21, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // Components ::= Statement 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("Components",22, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // Components ::= Structure 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("Components",22, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // ReturnStatement ::= RETURN Value SEMICOLON 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("ReturnStatement",33, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // ReturnStatement ::= RETURN SEMICOLON 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("ReturnStatement",33, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // Body ::= OBRACKET Components MoreBody CBRACKET 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("Body",23, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // Body ::= OBRACKET Components MoreBody ReturnStatement CBRACKET 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("Body",23, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-4)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // MoreBody ::= Components MoreBody 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("MoreBody",24, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // MoreBody ::= 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("MoreBody",24, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // IfSt ::= IF OPARENTHESIS BoolExp CPARENTHESIS Body 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("IfSt",25, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-4)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // IfElseSt ::= IF OPARENTHESIS BoolExp CPARENTHESIS Body ELSE Body 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("IfElseSt",26, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-6)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // DeclaAssig ::= DATA_TYPE IDENTIFIER ASSIGNMENT Value 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("DeclaAssig",29, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // ForSt ::= FOR OPARENTHESIS DeclaAssig SEMICOLON BoolExp SEMICOLON AritExp CPARENTHESIS Body 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("ForSt",27, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-8)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // ForSt ::= FOR OPARENTHESIS DeclaAssig SEMICOLON BoolExp SEMICOLON IncDecOperation CPARENTHESIS Body 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("ForSt",27, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-8)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // WhileSt ::= WHILE OPARENTHESIS BoolExp CPARENTHESIS Body 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("WhileSt",28, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-4)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // FunctionDeclaration ::= FunctionDeclaration FUNCTION IDENTIFIER OPARENTHESIS ParameterList CPARENTHESIS Body 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("FunctionDeclaration",11, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-6)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // FunctionDeclaration ::= FUNCTION IDENTIFIER OPARENTHESIS ParameterList CPARENTHESIS Body 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("FunctionDeclaration",11, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-5)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // FunctionDeclaration ::= FunctionDeclaration FUNCTION IDENTIFIER OPARENTHESIS CPARENTHESIS Body 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("FunctionDeclaration",11, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-5)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // FunctionDeclaration ::= FUNCTION IDENTIFIER OPARENTHESIS CPARENTHESIS Body 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("FunctionDeclaration",11, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-4)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // LibraryImport ::= LibraryImport IMPORT STRING_LITERAL SEMICOLON 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("LibraryImport",30, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // LibraryImport ::= IMPORT STRING_LITERAL SEMICOLON 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("LibraryImport",30, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // ArgumentList ::= Value 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("ArgumentList",31, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // ArgumentList ::= ArgumentList COMMA Value 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("ArgumentList",31, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // FunctionCall ::= IDENTIFIER OPARENTHESIS ArgumentList CPARENTHESIS SEMICOLON 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("FunctionCall",32, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-4)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // FunctionCall ::= IDENTIFIER OPARENTHESIS CPARENTHESIS SEMICOLON 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("FunctionCall",32, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Syntax$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Syntax$do_action(
    int                        CUP$Syntax$act_num,
    java_cup.runtime.lr_parser CUP$Syntax$parser,
    java.util.Stack            CUP$Syntax$stack,
    int                        CUP$Syntax$top)
    throws java.lang.Exception
    {
              return CUP$Syntax$do_action_part00000000(
                               CUP$Syntax$act_num,
                               CUP$Syntax$parser,
                               CUP$Syntax$stack,
                               CUP$Syntax$top);
    }
}

}
