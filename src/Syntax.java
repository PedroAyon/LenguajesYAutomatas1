
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

import java_cup.runtime.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Syntax extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public Syntax() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Syntax(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Syntax(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\113\000\002\002\004\000\002\002\004\000\002\002" +
    "\004\000\002\002\002\000\002\003\003\000\002\003\003" +
    "\000\002\003\003\000\002\003\003\000\002\003\003\000" +
    "\002\003\003\000\002\004\003\000\002\004\003\000\002" +
    "\005\003\000\002\005\003\000\002\005\003\000\002\005" +
    "\003\000\002\005\003\000\002\005\003\000\002\005\003" +
    "\000\002\006\003\000\002\006\003\000\002\011\003\000" +
    "\002\011\003\000\002\011\003\000\002\010\004\000\002" +
    "\012\006\000\002\012\003\000\002\013\005\000\002\013" +
    "\002\000\002\015\006\000\002\015\003\000\002\015\006" +
    "\000\002\015\004\000\002\015\005\000\002\016\005\000" +
    "\002\016\005\000\002\016\002\000\002\017\003\000\002" +
    "\017\003\000\002\020\006\000\002\022\003\000\002\022" +
    "\005\000\002\021\004\000\002\007\005\000\002\007\007" +
    "\000\002\023\003\000\002\023\003\000\002\023\003\000" +
    "\002\023\003\000\002\023\004\000\002\024\003\000\002" +
    "\024\003\000\002\024\003\000\002\024\003\000\002\025" +
    "\003\000\002\025\003\000\002\040\005\000\002\040\004" +
    "\000\002\026\006\000\002\026\007\000\002\027\004\000" +
    "\002\027\002\000\002\030\007\000\002\031\011\000\002" +
    "\034\006\000\002\032\013\000\002\032\013\000\002\033" +
    "\007\000\002\014\011\000\002\014\010\000\002\035\005" +
    "\000\002\036\003\000\002\036\005\000\002\037\007\000" +
    "\002\037\006" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\222\000\010\002\ufffe\045\010\047\006\001\002\000" +
    "\004\002\224\001\002\000\010\002\ufffe\045\010\047\006" +
    "\001\002\000\004\004\221\001\002\000\010\002\ufffe\045" +
    "\010\047\006\001\002\000\004\040\011\001\002\000\004" +
    "\050\012\001\002\000\004\013\013\001\002\000\006\014" +
    "\015\040\014\001\002\000\004\050\217\001\002\000\004" +
    "\011\022\001\002\000\006\010\020\014\021\001\002\000" +
    "\006\010\uffd9\014\uffd9\001\002\000\004\040\014\001\002" +
    "\000\004\011\022\001\002\000\022\005\045\006\032\040" +
    "\027\041\046\042\030\043\036\047\006\050\033\001\002" +
    "\000\010\002\uffbd\045\uffbd\047\uffbd\001\002\000\026\005" +
    "\uffca\006\uffca\012\uffca\040\uffca\041\uffca\042\uffca\043\uffca" +
    "\046\uffca\047\uffca\050\uffca\001\002\000\026\005\uffcf\006" +
    "\uffcf\012\uffcf\040\uffcf\041\uffcf\042\uffcf\043\uffcf\046\uffcf" +
    "\047\uffcf\050\uffcf\001\002\000\026\005\uffd3\006\uffd3\012" +
    "\uffd3\040\uffd3\041\uffd3\042\uffd3\043\uffd3\046\uffd3\047\uffd3" +
    "\050\uffd3\001\002\000\004\050\210\001\002\000\004\013" +
    "\204\001\002\000\026\005\uffd4\006\uffd4\012\uffd4\040\uffd4" +
    "\041\uffd4\042\uffd4\043\uffd4\046\uffd4\047\uffd4\050\uffd4\001" +
    "\002\000\052\007\uffea\010\uffea\014\uffea\015\uffea\016\uffea" +
    "\017\uffea\020\uffea\021\uffea\022\uffea\023\uffea\024\uffea\025" +
    "\uffea\026\uffea\030\uffea\031\uffea\032\uffea\033\uffea\034\uffea" +
    "\035\uffea\036\uffea\001\002\000\012\013\171\024\uffec\025" +
    "\uffec\037\170\001\002\000\006\024\124\025\125\001\002" +
    "\000\026\005\uffd1\006\uffd1\012\uffd1\040\uffd1\041\uffd1\042" +
    "\uffd1\043\uffd1\046\uffd1\047\uffd1\050\uffd1\001\002\000\004" +
    "\013\162\001\002\000\004\007\161\001\002\000\026\005" +
    "\uffd2\006\uffd2\012\uffd2\040\uffd2\041\uffd2\042\uffd2\043\uffd2" +
    "\046\uffd2\047\uffd2\050\uffd2\001\002\000\026\005\uffcd\006" +
    "\uffcd\012\uffcd\040\uffcd\041\uffcd\042\uffcd\043\uffcd\046\uffcd" +
    "\047\uffcd\050\uffcd\001\002\000\026\005\uffce\006\uffce\012" +
    "\uffce\040\uffce\041\uffce\042\uffce\043\uffce\046\uffce\047\uffce" +
    "\050\uffce\001\002\000\026\005\uffcc\006\uffcc\012\uffcc\040" +
    "\uffcc\041\uffcc\042\uffcc\043\uffcc\046\uffcc\047\uffcc\050\uffcc" +
    "\001\002\000\026\005\uffcb\006\uffcb\012\uffcb\040\uffcb\041" +
    "\uffcb\042\uffcb\043\uffcb\046\uffcb\047\uffcb\050\uffcb\001\002" +
    "\000\052\007\uffeb\010\uffeb\014\uffeb\015\uffeb\016\uffeb\017" +
    "\uffeb\020\uffeb\021\uffeb\022\uffeb\023\uffeb\024\uffeb\025\uffeb" +
    "\026\uffeb\030\uffeb\031\uffeb\032\uffeb\033\uffeb\034\uffeb\035" +
    "\uffeb\036\uffeb\001\002\000\004\013\103\001\002\000\026" +
    "\005\045\006\032\012\uffc4\040\027\041\046\042\030\043" +
    "\036\046\uffc4\047\006\050\033\001\002\000\006\012\053" +
    "\046\054\001\002\000\026\005\045\006\032\012\uffc4\040" +
    "\027\041\046\042\030\043\036\046\uffc4\047\006\050\033" +
    "\001\002\000\006\012\uffc5\046\uffc5\001\002\000\034\002" +
    "\uffc7\005\uffc7\006\uffc7\012\uffc7\040\uffc7\041\uffc7\042\uffc7" +
    "\043\uffc7\044\uffc7\045\uffc7\046\uffc7\047\uffc7\050\uffc7\001" +
    "\002\000\014\004\064\005\045\006\032\007\060\050\061" +
    "\001\002\000\004\012\056\001\002\000\034\002\uffc6\005" +
    "\uffc6\006\uffc6\012\uffc6\040\uffc6\041\uffc6\042\uffc6\043\uffc6" +
    "\044\uffc6\045\uffc6\046\uffc6\047\uffc6\050\uffc6\001\002\000" +
    "\004\007\102\001\002\000\004\012\uffc8\001\002\000\052" +
    "\007\uffec\010\uffec\014\uffec\015\uffec\016\uffec\017\uffec\020" +
    "\uffec\021\uffec\022\uffec\023\uffec\024\uffec\025\uffec\026\uffec" +
    "\030\uffec\031\uffec\032\uffec\033\uffec\034\uffec\035\uffec\036" +
    "\uffec\001\002\000\010\007\uffdb\010\uffdb\014\uffdb\001\002" +
    "\000\046\007\uffe7\010\uffe7\014\uffe7\015\072\016\070\017" +
    "\067\020\066\021\074\022\071\023\065\026\uffe7\030\uffe7" +
    "\031\uffe7\032\uffe7\033\uffe7\034\uffe7\035\uffe7\036\uffe7\001" +
    "\002\000\010\007\uffdc\010\uffdc\014\uffdc\001\002\000\010" +
    "\005\uffef\006\uffef\050\uffef\001\002\000\010\005\ufff2\006" +
    "\ufff2\050\ufff2\001\002\000\010\005\ufff3\006\ufff3\050\ufff3" +
    "\001\002\000\010\005\ufff4\006\ufff4\050\ufff4\001\002\000" +
    "\010\005\ufff0\006\ufff0\050\ufff0\001\002\000\010\005\ufff5" +
    "\006\ufff5\050\ufff5\001\002\000\010\005\045\006\032\050" +
    "\061\001\002\000\010\005\ufff1\006\ufff1\050\ufff1\001\002" +
    "\000\046\007\uffe5\010\uffe5\014\uffe5\015\072\016\070\017" +
    "\067\020\066\021\074\022\071\023\065\026\uffe5\030\uffe5" +
    "\031\uffe5\032\uffe5\033\uffe5\034\uffe5\035\uffe5\036\uffe5\001" +
    "\002\000\010\005\045\006\032\050\061\001\002\000\030" +
    "\007\uffe8\010\uffe8\014\uffe8\026\uffe8\030\uffe8\031\uffe8\032" +
    "\uffe8\033\uffe8\034\uffe8\035\uffe8\036\uffe8\001\002\000\046" +
    "\007\uffe5\010\uffe5\014\uffe5\015\072\016\070\017\067\020" +
    "\066\021\074\022\071\023\065\026\uffe5\030\uffe5\031\uffe5" +
    "\032\uffe5\033\uffe5\034\uffe5\035\uffe5\036\uffe5\001\002\000" +
    "\030\007\uffe6\010\uffe6\014\uffe6\026\uffe6\030\uffe6\031\uffe6" +
    "\032\uffe6\033\uffe6\034\uffe6\035\uffe6\036\uffe6\001\002\000" +
    "\004\012\uffc9\001\002\000\004\040\104\001\002\000\004" +
    "\050\156\001\002\000\004\007\106\001\002\000\016\005" +
    "\045\006\032\013\112\027\113\050\061\051\107\001\002" +
    "\000\006\007\uffe3\014\uffe3\001\002\000\022\026\132\030" +
    "\142\031\136\032\134\033\133\034\135\035\140\036\141" +
    "\001\002\000\004\007\117\001\002\000\016\005\045\006" +
    "\032\013\112\027\113\050\061\051\107\001\002\000\016" +
    "\005\045\006\032\013\112\027\113\050\061\051\107\001" +
    "\002\000\006\007\uffe1\014\uffe1\001\002\000\004\014\116" +
    "\001\002\000\006\007\uffe0\014\uffe0\001\002\000\010\005" +
    "\045\006\032\050\061\001\002\000\004\014\130\001\002" +
    "\000\004\014\126\001\002\000\026\014\uffe7\015\072\016" +
    "\070\017\067\020\066\021\074\022\071\023\065\024\124" +
    "\025\125\001\002\000\006\007\uffe9\014\uffe9\001\002\000" +
    "\006\007\uffee\014\uffee\001\002\000\006\007\uffed\014\uffed" +
    "\001\002\000\004\011\022\001\002\000\026\005\uffbf\006" +
    "\uffbf\012\uffbf\040\uffbf\041\uffbf\042\uffbf\043\uffbf\046\uffbf" +
    "\047\uffbf\050\uffbf\001\002\000\004\011\022\001\002\000" +
    "\026\005\uffc0\006\uffc0\012\uffc0\040\uffc0\041\uffc0\042\uffc0" +
    "\043\uffc0\046\uffc0\047\uffc0\050\uffc0\001\002\000\010\005" +
    "\ufff7\006\ufff7\050\ufff7\001\002\000\010\005\ufffb\006\ufffb" +
    "\050\ufffb\001\002\000\010\005\ufffc\006\ufffc\050\ufffc\001" +
    "\002\000\010\005\ufffa\006\ufffa\050\ufffa\001\002\000\010" +
    "\005\ufffd\006\ufffd\050\ufffd\001\002\000\010\005\045\006" +
    "\032\050\061\001\002\000\010\005\ufff9\006\ufff9\050\ufff9" +
    "\001\002\000\010\005\ufff8\006\ufff8\050\ufff8\001\002\000" +
    "\010\005\ufff6\006\ufff6\050\ufff6\001\002\000\010\005\045" +
    "\006\032\050\061\001\002\000\026\007\uffdd\014\uffdd\026" +
    "\132\030\142\031\136\032\134\033\133\034\135\035\140" +
    "\036\141\001\002\000\006\007\uffe4\014\uffe4\001\002\000" +
    "\010\005\045\006\032\050\061\001\002\000\010\005\045" +
    "\006\032\050\061\001\002\000\026\007\uffdd\014\uffdd\026" +
    "\132\030\142\031\136\032\134\033\133\034\135\035\140" +
    "\036\141\001\002\000\006\007\uffdf\014\uffdf\001\002\000" +
    "\026\007\uffdd\014\uffdd\026\132\030\142\031\136\032\134" +
    "\033\133\034\135\035\140\036\141\001\002\000\006\007" +
    "\uffde\014\uffde\001\002\000\026\007\uffdd\014\uffdd\026\132" +
    "\030\142\031\136\032\134\033\133\034\135\035\140\036" +
    "\141\001\002\000\006\007\uffe2\014\uffe2\001\002\000\004" +
    "\037\157\001\002\000\012\004\064\005\045\006\032\050" +
    "\061\001\002\000\004\007\uffc1\001\002\000\026\005\uffd0" +
    "\006\uffd0\012\uffd0\040\uffd0\041\uffd0\042\uffd0\043\uffd0\046" +
    "\uffd0\047\uffd0\050\uffd0\001\002\000\016\005\045\006\032" +
    "\013\112\027\113\050\061\051\107\001\002\000\004\014" +
    "\164\001\002\000\004\011\022\001\002\000\030\005\uffc3" +
    "\006\uffc3\012\uffc3\040\uffc3\041\uffc3\042\uffc3\043\uffc3\044" +
    "\166\046\uffc3\047\uffc3\050\uffc3\001\002\000\004\011\022" +
    "\001\002\000\026\005\uffc2\006\uffc2\012\uffc2\040\uffc2\041" +
    "\uffc2\042\uffc2\043\uffc2\046\uffc2\047\uffc2\050\uffc2\001\002" +
    "\000\012\004\064\005\045\006\032\050\061\001\002\000" +
    "\014\004\064\005\045\006\032\014\174\050\061\001\002" +
    "\000\006\010\176\014\177\001\002\000\006\010\uffba\014" +
    "\uffba\001\002\000\004\007\175\001\002\000\026\005\uffb7" +
    "\006\uffb7\012\uffb7\040\uffb7\041\uffb7\042\uffb7\043\uffb7\046" +
    "\uffb7\047\uffb7\050\uffb7\001\002\000\012\004\064\005\045" +
    "\006\032\050\061\001\002\000\004\007\200\001\002\000" +
    "\026\005\uffb8\006\uffb8\012\uffb8\040\uffb8\041\uffb8\042\uffb8" +
    "\043\uffb8\046\uffb8\047\uffb8\050\uffb8\001\002\000\006\010" +
    "\uffb9\014\uffb9\001\002\000\004\007\203\001\002\000\026" +
    "\005\uffda\006\uffda\012\uffda\040\uffda\041\uffda\042\uffda\043" +
    "\uffda\046\uffda\047\uffda\050\uffda\001\002\000\016\005\045" +
    "\006\032\013\112\027\113\050\061\051\107\001\002\000" +
    "\004\014\206\001\002\000\004\011\022\001\002\000\026" +
    "\005\uffbe\006\uffbe\012\uffbe\040\uffbe\041\uffbe\042\uffbe\043" +
    "\uffbe\046\uffbe\047\uffbe\050\uffbe\001\002\000\006\007\212" +
    "\037\211\001\002\000\012\004\064\005\045\006\032\050" +
    "\061\001\002\000\026\005\uffd6\006\uffd6\012\uffd6\040\uffd6" +
    "\041\uffd6\042\uffd6\043\uffd6\046\uffd6\047\uffd6\050\uffd6\001" +
    "\002\000\004\007\214\001\002\000\026\005\uffd5\006\uffd5" +
    "\012\uffd5\040\uffd5\041\uffd5\042\uffd5\043\uffd5\046\uffd5\047" +
    "\uffd5\050\uffd5\001\002\000\006\010\uffd8\014\uffd8\001\002" +
    "\000\010\002\uffbc\045\uffbc\047\uffbc\001\002\000\006\010" +
    "\uffd7\014\uffd7\001\002\000\004\002\uffff\001\002\000\004" +
    "\007\222\001\002\000\032\002\uffbb\005\uffbb\006\uffbb\012" +
    "\uffbb\040\uffbb\041\uffbb\042\uffbb\043\uffbb\045\uffbb\046\uffbb" +
    "\047\uffbb\050\uffbb\001\002\000\004\002\000\001\002\000" +
    "\004\002\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\222\000\010\002\003\014\006\035\004\001\001\000" +
    "\002\001\001\000\010\002\222\014\006\035\004\001\001" +
    "\000\002\001\001\000\010\002\217\014\006\035\004\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\021\016\022\015\001\001\000\002\001\001\000" +
    "\004\026\215\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\021\214\001\001\000\004\026\022\001\001\000" +
    "\034\007\030\010\036\011\033\020\025\023\043\024\023" +
    "\025\046\030\024\031\041\032\040\033\042\035\034\037" +
    "\037\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\006\122\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\036\007\030\010\036" +
    "\011\033\020\025\023\043\024\023\025\050\027\047\030" +
    "\024\031\041\032\040\033\042\035\034\037\037\001\001" +
    "\000\004\040\054\001\001\000\036\007\030\010\036\011" +
    "\033\020\025\023\043\024\023\025\050\027\051\030\024" +
    "\031\041\032\040\033\042\035\034\037\037\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\011\062\012\061" +
    "\017\056\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\005\072\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\011" +
    "\074\001\001\000\002\001\001\000\006\005\075\013\076" +
    "\001\001\000\004\011\077\001\001\000\002\001\001\000" +
    "\006\005\075\013\100\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\034\104\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\011\062\012\107\015\110\001\001" +
    "\000\002\001\001\000\006\003\136\004\142\001\001\000" +
    "\002\001\001\000\010\011\062\012\107\015\114\001\001" +
    "\000\010\011\062\012\107\015\113\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\010\120" +
    "\011\121\012\117\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\005\072\006\122\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\026\126\001" +
    "\001\000\002\001\001\000\004\026\130\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\011\062" +
    "\012\153\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\011\062\012\143\001\001\000\010" +
    "\003\145\004\146\016\144\001\001\000\002\001\001\000" +
    "\006\011\062\012\151\001\001\000\006\011\062\012\147" +
    "\001\001\000\010\003\145\004\146\016\150\001\001\000" +
    "\002\001\001\000\010\003\145\004\146\016\152\001\001" +
    "\000\002\001\001\000\010\003\145\004\146\016\154\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\011\062" +
    "\012\061\017\157\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\011\062\012\107\015\162\001\001\000\002" +
    "\001\001\000\004\026\164\001\001\000\002\001\001\000" +
    "\004\026\166\001\001\000\002\001\001\000\010\011\062" +
    "\012\061\017\201\001\001\000\012\011\062\012\061\017" +
    "\172\036\171\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\011\062\012" +
    "\061\017\200\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\011\062\012\107\015\204\001\001\000\002\001\001" +
    "\000\004\026\206\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\011\062\012\061\017\212\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Syntax$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Syntax$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Syntax$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    private Symbol s;

    public void syntax_error(Symbol s){
        System.out.println("compiler has detected a syntax error at line " + s.left + " column " + s.right);
    }

    public Symbol getS(){
        return this.s;
}


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Syntax$actions {
  private final Syntax parser;

  /** Constructor */
  CUP$Syntax$actions(Syntax parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Syntax$do_action_part00000000(
    int                        CUP$Syntax$act_num,
    java_cup.runtime.lr_parser CUP$Syntax$parser,
    java.util.Stack            CUP$Syntax$stack,
    int                        CUP$Syntax$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Syntax$result;

      /* select the action based on the action number */
      switch (CUP$Syntax$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= Program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).value;
		RESULT = start_val;
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Syntax$parser.done_parsing();
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // Program ::= LibraryImport Program 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("Program",0, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // Program ::= FunctionDeclaration Program 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("Program",0, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // Program ::= 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("Program",0, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // RelationalOp ::= LESS_THAN 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("RelationalOp",1, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // RelationalOp ::= MORE_THAN 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("RelationalOp",1, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // RelationalOp ::= LESS_OR_EQ 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("RelationalOp",1, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // RelationalOp ::= MORE_OR_EQ 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("RelationalOp",1, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // RelationalOp ::= EQUALS 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("RelationalOp",1, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // RelationalOp ::= DIFFERENT_THAN 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("RelationalOp",1, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // LogicOp ::= AND 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("LogicOp",2, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // LogicOp ::= OR 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("LogicOp",2, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // AritmethicOp ::= MUL 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("AritmethicOp",3, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // AritmethicOp ::= POW 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("AritmethicOp",3, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // AritmethicOp ::= SUM 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("AritmethicOp",3, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // AritmethicOp ::= SUB 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("AritmethicOp",3, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // AritmethicOp ::= DIV 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("AritmethicOp",3, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // AritmethicOp ::= INT_DIV 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("AritmethicOp",3, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // AritmethicOp ::= MOD 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("AritmethicOp",3, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // IncDec ::= INC 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("IncDec",4, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // IncDec ::= DEC 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("IncDec",4, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // ID_NUM ::= IDENTIFIER 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("ID_NUM",7, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // ID_NUM ::= INTEGER_LITERAL 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("ID_NUM",7, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // ID_NUM ::= DECIMAL_LITERAL 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("ID_NUM",7, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // IncDecOperation ::= ID_NUM IncDec 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("IncDecOperation",6, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // AritExp ::= ID_NUM AritmethicOp ID_NUM MoreAritExp 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("AritExp",8, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // AritExp ::= ID_NUM 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("AritExp",8, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // MoreAritExp ::= AritmethicOp ID_NUM MoreAritExp 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("MoreAritExp",9, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // MoreAritExp ::= 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("MoreAritExp",9, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // BoolExp ::= AritExp LogicOp AritExp MoreBoolExp 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("BoolExp",11, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // BoolExp ::= BOOL 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("BoolExp",11, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // BoolExp ::= AritExp RelationalOp AritExp MoreBoolExp 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("BoolExp",11, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // BoolExp ::= NOT BoolExp 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("BoolExp",11, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // BoolExp ::= OPARENTHESIS BoolExp CPARENTHESIS 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("BoolExp",11, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // MoreBoolExp ::= LogicOp AritExp MoreBoolExp 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("MoreBoolExp",12, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // MoreBoolExp ::= RelationalOp AritExp MoreBoolExp 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("MoreBoolExp",12, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // MoreBoolExp ::= 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("MoreBoolExp",12, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // Value ::= STRING_LITERAL 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("Value",13, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // Value ::= AritExp 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("Value",13, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // Assignment ::= IDENTIFIER ASSIGNMENT Value SEMICOLON 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("Assignment",14, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // ParameterList ::= Parameter 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("ParameterList",16, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // ParameterList ::= ParameterList COMMA Parameter 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("ParameterList",16, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // Parameter ::= DATA_TYPE IDENTIFIER 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("Parameter",15, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // Declaration ::= DATA_TYPE IDENTIFIER SEMICOLON 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("Declaration",5, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // Declaration ::= DATA_TYPE IDENTIFIER ASSIGNMENT Value SEMICOLON 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("Declaration",5, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-4)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // Statement ::= Declaration 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("Statement",17, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // Statement ::= Assignment 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("Statement",17, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // Statement ::= FunctionCall 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("Statement",17, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // Statement ::= LibraryImport 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("Statement",17, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // Statement ::= IncDecOperation SEMICOLON 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("Statement",17, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // Structure ::= IfSt 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("Structure",18, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // Structure ::= IfElseSt 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("Structure",18, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // Structure ::= ForSt 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("Structure",18, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // Structure ::= WhileSt 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("Structure",18, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // Components ::= Statement 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("Components",19, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // Components ::= Structure 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("Components",19, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // ReturnStatement ::= RETURN Value SEMICOLON 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("ReturnStatement",30, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // ReturnStatement ::= RETURN SEMICOLON 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("ReturnStatement",30, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // Body ::= OBRACKET Components MoreBody CBRACKET 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("Body",20, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // Body ::= OBRACKET Components MoreBody ReturnStatement CBRACKET 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("Body",20, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-4)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // MoreBody ::= Components MoreBody 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("MoreBody",21, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // MoreBody ::= 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("MoreBody",21, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // IfSt ::= IF OPARENTHESIS BoolExp CPARENTHESIS Body 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("IfSt",22, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-4)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // IfElseSt ::= IF OPARENTHESIS BoolExp CPARENTHESIS Body ELSE Body 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("IfElseSt",23, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-6)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // DeclaAssig ::= DATA_TYPE IDENTIFIER ASSIGNMENT Value 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("DeclaAssig",26, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // ForSt ::= FOR OPARENTHESIS DeclaAssig SEMICOLON BoolExp SEMICOLON AritExp CPARENTHESIS Body 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("ForSt",24, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-8)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // ForSt ::= FOR OPARENTHESIS DeclaAssig SEMICOLON BoolExp SEMICOLON IncDecOperation CPARENTHESIS Body 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("ForSt",24, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-8)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // WhileSt ::= WHILE OPARENTHESIS BoolExp CPARENTHESIS Body 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("WhileSt",25, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-4)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // FunctionDeclaration ::= FUNCTION DATA_TYPE IDENTIFIER OPARENTHESIS ParameterList CPARENTHESIS Body 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("FunctionDeclaration",10, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-6)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // FunctionDeclaration ::= FUNCTION DATA_TYPE IDENTIFIER OPARENTHESIS CPARENTHESIS Body 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("FunctionDeclaration",10, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-5)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // LibraryImport ::= IMPORT STRING_LITERAL SEMICOLON 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("LibraryImport",27, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // ArgumentList ::= Value 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("ArgumentList",28, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // ArgumentList ::= ArgumentList COMMA Value 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("ArgumentList",28, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // FunctionCall ::= IDENTIFIER OPARENTHESIS ArgumentList CPARENTHESIS SEMICOLON 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("FunctionCall",29, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-4)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // FunctionCall ::= IDENTIFIER OPARENTHESIS CPARENTHESIS SEMICOLON 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("FunctionCall",29, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Syntax$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Syntax$do_action(
    int                        CUP$Syntax$act_num,
    java_cup.runtime.lr_parser CUP$Syntax$parser,
    java.util.Stack            CUP$Syntax$stack,
    int                        CUP$Syntax$top)
    throws java.lang.Exception
    {
              return CUP$Syntax$do_action_part00000000(
                               CUP$Syntax$act_num,
                               CUP$Syntax$parser,
                               CUP$Syntax$stack,
                               CUP$Syntax$top);
    }
}

}
